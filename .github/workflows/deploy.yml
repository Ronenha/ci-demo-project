---
  name: Deploy PetClinic
  
  on:
    workflow_dispatch:
      inputs:
        environment:
          description: 'Environment to deploy to'
          required: true
          default: 'dev'
          type: choice
          options:
            - dev
            - staging
            - prod
    push:
      branches:
        - main
        - dev
  
  jobs:
    deploy-infrastructure:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      steps:
        - uses: actions/checkout@v3
        
        - name: Set environment name
          run: echo "ENV_NAME=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_ENV
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
        
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
        
        - name: Terraform Init
          working-directory: ./terraform
          run: terraform init
        
        - name: Terraform Plan
          working-directory: ./terraform
          run: |
            echo "Using environment: ${{ env.ENV_NAME }}"
            terraform plan -var="environment=${{ env.ENV_NAME }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="vpc_id=${{ secrets.VPC_ID }}"
        
        - name: Terraform Apply
          if: github.event.inputs.environment != 'prod'
          working-directory: ./terraform
          run: |
            terraform apply -auto-approve -var="environment=${{ env.ENV_NAME }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="vpc_id=${{ secrets.VPC_ID }}"
        
        - name: Terraform Apply (Production)
          if: github.event.inputs.environment == 'prod'
          working-directory: ./terraform
          run: |
            terraform apply -var="environment=${{ env.ENV_NAME }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="vpc_id=${{ secrets.VPC_ID }}"
  
    build-and-deploy:
      needs: deploy-infrastructure
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      steps:
        - uses: actions/checkout@v3
        
        - name: Set environment name
          run: echo "ENV_NAME=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_ENV
        
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin'
            cache: maven
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
        
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
        
        - name: Ensure ECR Repository exists
          run: |
            echo "Checking for ECR repository: petclinic-${{ env.ENV_NAME }}"
            if ! aws ecr describe-repositories --repository-names petclinic-${{ env.ENV_NAME }} 2>/dev/null; then
              echo "ECR repository doesn't exist, creating it now..."
              aws ecr create-repository --repository-name petclinic-${{ env.ENV_NAME }} --image-scanning-configuration scanOnPush=true
            else
              echo "ECR repository already exists"
            fi
        
        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: petclinic-${{ env.ENV_NAME }}
            IMAGE_TAG: ${{ github.sha }}
          run: |
            echo "Using environment: ${{ env.ENV_NAME }}"
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        - name: Ensure ECS service exists
          run: |
            CLUSTER_NAME="petclinic-${{ env.ENV_NAME }}"
            SERVICE_NAME="petclinic-service"
            
            # Check if cluster exists
            if ! aws ecs describe-clusters --clusters $CLUSTER_NAME | grep -q "ACTIVE"; then
              echo "Error: ECS cluster $CLUSTER_NAME doesn't exist or isn't active"
              exit 1
            fi
            
            # Check if service exists
            if ! aws ecs list-services --cluster $CLUSTER_NAME | grep -q $SERVICE_NAME; then
              echo "Service $SERVICE_NAME doesn't exist in cluster $CLUSTER_NAME, creating it..."
              # Here you would add code to create the service
              # This would require task definition setup as well
              echo "For now, skipping deployment as service doesn't exist yet"
              echo "DEPLOYMENT_NEEDED=false" >> $GITHUB_ENV
            else
              echo "Service exists, proceeding with deployment"
              echo "DEPLOYMENT_NEEDED=true" >> $GITHUB_ENV
            fi
        
        - name: Deploy to ECS
          if: env.DEPLOYMENT_NEEDED == 'true'
          run: |
            aws ecs update-service --cluster petclinic-${{ env.ENV_NAME }} \
            --service petclinic-service \
            --force-new-deployment
        
        - name: Verify Deployment
          if: env.DEPLOYMENT_NEEDED == 'true'
          run: |
            echo "Waiting for deployment to complete..."
            aws ecs wait services-stable --cluster petclinic-${{ env.ENV_NAME }} \
            --services petclinic-service